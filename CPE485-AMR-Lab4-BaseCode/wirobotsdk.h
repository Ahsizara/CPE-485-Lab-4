#if !defined(AFX_WIROBOTSDK_H__8F5BE058_999D_4AF7_8729_0911785C9F3F__INCLUDED_)
#define AFX_WIROBOTSDK_H__8F5BE058_999D_4AF7_8729_0911785C9F3F__INCLUDED_

#include "Map.h"

 

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CWiRobotSDK wrapper class

const double IR4Coeff4=		0.0000000000037025;
const double IR4Coeff3=		-0.000000041780;
const double IR4Coeff2=		0.00016544;
const double IR4Coeff1=		-0.2752;
const double IR4Coeff0=		185.5603;

const double SonarAngleFrontLeft = 3.1416/4;
const double SonarAngleFrontCenter = 0.0;
const double SonarAngleFrontRight = -3.1416/4;
/*
const double IRRangeAngleFrontFarLeft = 3.1416/2;
const double IRRangeAngleFrontMidLeft = 3.1416*3/8;
const double IRRangeAngleFrontJustLeft = 3.1416*1/8;
const double IRRangeAngleFrontJustRight = -3.1416*1/8;
const double IRRangeAngleFrontMidRight = -3.1416*3/8;
const double IRRangeAngleFrontFarRight = -3.1416/2;
*/
const double IRRangeAngleFrontFarLeft = 3.1416/2;
const double IRRangeAngleFrontMidLeft = 3.1416/4;
const double IRRangeAngleFrontJustLeft = 3.1416/12;
const double IRRangeAngleFrontJustRight = -3.1416/12;
const double IRRangeAngleFrontMidRight = -3.1416/4;
const double IRRangeAngleFrontFarRight = -3.1416/2;

const double IRRangeAngleBack = 3.1416;



class CWiRobotSDK : public CWnd
{
protected:
	DECLARE_DYNCREATE(CWiRobotSDK)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xe5d3f8a9, 0x4e42, 0x4497, { 0xbf, 0x13, 0x88, 0xf0, 0x91, 0x93, 0xdd, 0xf3 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:
	long GetVoiceSegmentLength();
	void SetVoiceSegmentLength(long);
	CString GetRobotName();
	void SetRobotName(LPCTSTR);
	long GetTest();
	void SetTest(long);
	CString GetTestStr();
	void SetTestStr(LPCTSTR);

	double encoderPulse1, encoderPulse2;
	double encoderSpeed1, encoderSpeed2;
	SYSTEMTIME st;
	FILETIME ft;
	LARGE_INTEGER lastEncoderPulse1Time, lastEncoderPulse2Time;
	LARGE_INTEGER encoderPulse1Time, encoderPulse2Time;
	Map wirobotsdkMap;


// Operations
public:
	virtual short GetSensorSonar1(double x, double y, double t);
	virtual short GetSensorSonar2(double x, double y, double t);
	virtual short GetSensorSonar3(double x, double y, double t);
	short GetSensorSonar4();
	short GetSensorSonar5();
	short GetSensorSonar6();
	short GetSensorHumanMotion1();
	short GetSensorHumanAlarm2();
	short GetSensorHumanMotion2();
	short GetSensorTiltingX();
	short GetSensorTiltingY();
	short GetSensorOverheatAD1();
	short GetSensorOverheatAD2();
	short GetSensorTemperature();
	virtual short GetSensorIRRange(double x, double y, double t);
	short GetSensorBatteryAD1();
	short GetSensorBatteryAD2();
	short GetSensorRefVoltage();
	void EnableDcMotor(short channel);
	void DisableDcMotor(short channel);
	void EnableServo(short channel);
	void DisableServo(short channel);
	void SetDcMotorTrajectoryPlan(short channel, short tranPlanMethod);
	void SetDcMotorSensorFilter(short channel, short filterMethod);
	void SetDcMotorSensorUsage(short channel, short sensorType);
	void SetDcMotorControlMode(short channel, short controlMode);
	void DcMotorPositionTimeCtr(short channel, short cmdValue, short timePeriod);
	void DcMotorPositionNonTimeCtr(short channel, short cmdValue);
	void DcMotorPwmTimeCtr(short channel, short cmdValue, short timePeriod);
	void DcMotorPwmNonTimeCtr(short channel, short cmdValue);
	void ServoTimeCtr(short channel, short cmdValue, short timePeriods);
	void servoNonTimeCtr(short channel, short cmdValue);
	short GetSensorPot(short channel);
	void PlayAudioFile(LPCTSTR fileName);
	void TakePhoto();
	void Refresh();
	BOOL SavePhotoAsBMP(LPCTSTR fileName);
	void ServoTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6, short timePeriods);
	short GetSensorHumanAlarm1();
	short GetSensorIRCode1();
	short GetSensorIRCode2();
	short GetSensorIRCode3();
	short GetSensorIRCode4();
	void DcMotorPositionNonTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6);
	void DcMotorPositionTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6, short timePeriods);
	void SetDcMotorPositionControlPID(short channel, short Kp, short Kd, short Ki);
	void StartRecord(short voiceSegment);
	void StopRecord();
	long GetVoiceSegment();
	void ServoNoTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6);
	void DcMotorPwmNonTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6);
	void DcMotorPwmTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6, short timePeriods);
	void DcMotorVelocityNonTimeCtr(short channel, short cmdValue);
	virtual void DcMotorVelocityNonTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6);
	void DcMotorVelocityTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6, short timePeriods);
	void DcMotorVelocityTimeCtr(short channel, short cmdValue, short timePeriods);
	void SetDcMotorVelocityControlPID(short channel, short Kp, short Kd, short Ki);
	long GetImageAddress();
	void StopAudioPlay();
	long GetImageYDataAddress();
	void LcdDisplayPMS(LPCTSTR bmpFileName);
	short GetSensorPotVoltage();
	short GetSensorBatteryAD3();
	short GetSensorPot1();
	short GetSensorPot2();
	short GetSensorPot3();
	short GetSensorPot4();
	short GetSensorPot5();
	short GetSensorPot6();
	void SetServoTrajectoryPlan(short channel, short tranPlanMethod);
	void SetCustomDOUT(short dout);
	short GetCustomDIN();
	virtual short GetCustomAD1(double x, double y, double t);
	virtual short GetCustomAD2(double x, double y, double t);
	virtual short GetCustomAD3(double x, double y, double t);
	virtual short GetCustomAD4(double x, double y, double t);
	virtual short GetCustomAD5(double x, double y, double t);
	virtual short GetCustomAD6(double x, double y, double t);
	virtual short GetCustomAD7(double x, double y, double t);
	virtual short GetCustomAD8(double x, double y, double t);
	void SystemMotorSensorRequest(short Packets);
	void SystemStandardSensorRequest(short Packets);
	void SystemCustomSensorRequest(short Packets);
	void SetSysMotorSensorPeriod(short PeriodTime);
	void SetSysStandardSensorPeriod(short PeriodTime);
	void SetSysCustomSensorPeriod(short PeriodTime);
	void EnableMotorSensorSending();
	void EnableStandardSensorSending();
	void EnableCustomSensorSending();
	void DisableMotorSensorSending();
	void DisableStandardSensorSending();
	void DisableCustomSensorSending();
	void SetSysAllSensorPeriod(short PeriodTime);
	void SystemAllSensorRequest(short Packets);
	void EnableAllSensorSending();
	void DisableAllSensorSending();
	long GetVoiceSegLength();
	void SetInfraredControlOutput(short low, short high);
	short GetMotorCurrent1();
	short GetMotorCurrent2();
	short GetMotorCurrent3();
	short GetMotorCurrent4();
	short GetMotorCurrent5();
	short GetMotorCurrent6();
	virtual short GetEncoderPulse1();
	virtual short GetEncoderSpeed1();
	virtual short GetEncoderPulse2();
	virtual short GetEncoderSpeed2();
	short GetEncoderDir1();
	short GetEncoderDir2();
	short GetSensorSonar(short channel);
	short GetMotorCurrent(short channel);
	short GetCustomAD(short channel);
	void SetMotorPolarity1(short Polarity);
	void SetMotorPolarity2(short Polarity);
	void SetMotorPolarity3(short Polarity);
	void SetMotorPolarity4(short Polarity);
	void SetMotorPolarity5(short Polarity);
	void SetMotorPolarity6(short Polarity);
	void SetMotorPolarity(short channel, short Polarity);
	void EnableBumperProtection();
	void DisableBumperProtection();
	void LcdDisplayPMB(LPCTSTR bmpFileName);
	void SuspendDcMotor(short channel);
	void ResumeDcMotor(short channel);
	void connectRobot(LPCTSTR robotName);
	long GetVoiceData(long VoicePtr);
	short getSenID1();
	short getSenID2();
	short getSenID3();
	short getSenID4();
	short GetGPS01();
	short GetGPS02();
	short GetGPS03();
	short GetGPS04();
	short GetGPS05();
	short GetGPS06();
	short GetGPS07();
	short GetGPS08();
	void SetGPSID(short ID1, short ID2, short ID3, short ID4);
	short ConvertIRToCM(short result);

};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.












class CWiRobotSDK_Simulator : public CWiRobotSDK
{
protected:
	//DECLARE_DYNCREATE(CWiRobotSDK_Simulator)
public:
	CWiRobotSDK_Simulator();
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xe5d3f8a9, 0x4e42, 0x4497, { 0xbf, 0x13, 0x88, 0xf0, 0x91, 0x93, 0xdd, 0xf3 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:
	long GetVoiceSegmentLength();
	void SetVoiceSegmentLength(long);
	CString GetRobotName();
	void SetRobotName(LPCTSTR);
	long GetTest();
	void SetTest(long);
	CString GetTestStr();
	void SetTestStr(LPCTSTR);

// Operations
public:
	short GetSensorSonar1(double x, double y, double t);
	short GetSensorSonar2(double x, double y, double t);
	short GetSensorSonar3(double x, double y, double t);
	short GetSensorSonar4();
	short GetSensorSonar5();
	short GetSensorSonar6();
	short GetSensorHumanMotion1();
	short GetSensorHumanAlarm2();
	short GetSensorHumanMotion2();
	short GetSensorTiltingX();
	short GetSensorTiltingY();
	short GetSensorOverheatAD1();
	short GetSensorOverheatAD2();
	short GetSensorTemperature();
	short GetSensorIRRange(double x, double y, double t);
	short GetSensorBatteryAD1();
	short GetSensorBatteryAD2();
	short GetSensorRefVoltage();
	void EnableDcMotor(short channel);
	void DisableDcMotor(short channel);
	void EnableServo(short channel);
	void DisableServo(short channel);
	void SetDcMotorTrajectoryPlan(short channel, short tranPlanMethod);
	void SetDcMotorSensorFilter(short channel, short filterMethod);
	void SetDcMotorSensorUsage(short channel, short sensorType);
	void SetDcMotorControlMode(short channel, short controlMode);
	void DcMotorPositionTimeCtr(short channel, short cmdValue, short timePeriod);
	void DcMotorPositionNonTimeCtr(short channel, short cmdValue);
	void DcMotorPwmTimeCtr(short channel, short cmdValue, short timePeriod);
	void DcMotorPwmNonTimeCtr(short channel, short cmdValue);
	void ServoTimeCtr(short channel, short cmdValue, short timePeriods);
	void servoNonTimeCtr(short channel, short cmdValue);
	short GetSensorPot(short channel);
	void PlayAudioFile(LPCTSTR fileName);
	void TakePhoto();
	void Refresh();
	BOOL SavePhotoAsBMP(LPCTSTR fileName);
	void ServoTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6, short timePeriods);
	short GetSensorHumanAlarm1();
	short GetSensorIRCode1();
	short GetSensorIRCode2();
	short GetSensorIRCode3();
	short GetSensorIRCode4();
	void DcMotorPositionNonTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6);
	void DcMotorPositionTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6, short timePeriods);
	void SetDcMotorPositionControlPID(short channel, short Kp, short Kd, short Ki);
	void StartRecord(short voiceSegment);
	void StopRecord();
	long GetVoiceSegment();
	void ServoNoTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6);
	void DcMotorPwmNonTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6);
	void DcMotorPwmTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6, short timePeriods);
	void DcMotorVelocityNonTimeCtr(short channel, short cmdValue);
	void DcMotorVelocityNonTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6);
	void DcMotorVelocityTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6, short timePeriods);
	void DcMotorVelocityTimeCtr(short channel, short cmdValue, short timePeriods);
	void SetDcMotorVelocityControlPID(short channel, short Kp, short Kd, short Ki);
	long GetImageAddress();
	void StopAudioPlay();
	long GetImageYDataAddress();
	void LcdDisplayPMS(LPCTSTR bmpFileName);
	short GetSensorPotVoltage();
	short GetSensorBatteryAD3();
	short GetSensorPot1();
	short GetSensorPot2();
	short GetSensorPot3();
	short GetSensorPot4();
	short GetSensorPot5();
	short GetSensorPot6();
	void SetServoTrajectoryPlan(short channel, short tranPlanMethod);
	void SetCustomDOUT(short dout);
	short GetCustomDIN();
	short GetCustomAD1(double x, double y, double t);
	short GetCustomAD2(double x, double y, double t);
	short GetCustomAD3(double x, double y, double t);
	short GetCustomAD4(double x, double y, double t);
	short GetCustomAD5(double x, double y, double t);
	short GetCustomAD6(double x, double y, double t);
	short GetCustomAD7(double x, double y, double t);
	short GetCustomAD8(double x, double y, double t);
	void SystemMotorSensorRequest(short Packets);
	void SystemStandardSensorRequest(short Packets);
	void SystemCustomSensorRequest(short Packets);
	void SetSysMotorSensorPeriod(short PeriodTime);
	void SetSysStandardSensorPeriod(short PeriodTime);
	void SetSysCustomSensorPeriod(short PeriodTime);
	void EnableMotorSensorSending();
	void EnableStandardSensorSending();
	void EnableCustomSensorSending();
	void DisableMotorSensorSending();
	void DisableStandardSensorSending();
	void DisableCustomSensorSending();
	void SetSysAllSensorPeriod(short PeriodTime);
	void SystemAllSensorRequest(short Packets);
	void EnableAllSensorSending();
	void DisableAllSensorSending();
	long GetVoiceSegLength();
	void SetInfraredControlOutput(short low, short high);
	short GetMotorCurrent1();
	short GetMotorCurrent2();
	short GetMotorCurrent3();
	short GetMotorCurrent4();
	short GetMotorCurrent5();
	short GetMotorCurrent6();
	short GetEncoderPulse1();
	short GetEncoderSpeed1();
	short GetEncoderPulse2();
	short GetEncoderSpeed2();
	short GetEncoderDir1();
	short GetEncoderDir2();
	short GetSensorSonar(short channel);
	short GetMotorCurrent(short channel);
	short GetCustomAD(short channel);
	void SetMotorPolarity1(short Polarity);
	void SetMotorPolarity2(short Polarity);
	void SetMotorPolarity3(short Polarity);
	void SetMotorPolarity4(short Polarity);
	void SetMotorPolarity5(short Polarity);
	void SetMotorPolarity6(short Polarity);
	void SetMotorPolarity(short channel, short Polarity);
	void EnableBumperProtection();
	void DisableBumperProtection();
	void LcdDisplayPMB(LPCTSTR bmpFileName);
	void SuspendDcMotor(short channel);
	void ResumeDcMotor(short channel);
	void connectRobot(LPCTSTR robotName);
	long GetVoiceData(long VoicePtr);
	short getSenID1();
	short getSenID2();
	short getSenID3();
	short getSenID4();
	short GetGPS01();
	short GetGPS02();
	short GetGPS03();
	short GetGPS04();
	short GetGPS05();
	short GetGPS06();
	short GetGPS07();
	short GetGPS08();
	void SetGPSID(short ID1, short ID2, short ID3, short ID4);
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_WIROBOTSDK_H__8F5BE058_999D_4AF7_8729_0911785C9F3F__INCLUDED_)
