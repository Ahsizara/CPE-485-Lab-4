// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "wirobotsdk.h"
#include "robot.h"

/////////////////////////////////////////////////////////////////////////////
// CWiRobotSDK

IMPLEMENT_DYNCREATE(CWiRobotSDK, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CWiRobotSDK properties

long CWiRobotSDK::GetVoiceSegmentLength()
{
	long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CWiRobotSDK::SetVoiceSegmentLength(long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

CString CWiRobotSDK::GetRobotName()
{
	CString result;
	GetProperty(0x2, VT_BSTR, (void*)&result);
	return result;
}

void CWiRobotSDK::SetRobotName(LPCTSTR propVal)
{
	SetProperty(0x2, VT_BSTR, propVal);
}

long CWiRobotSDK::GetTest()
{
	long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}

void CWiRobotSDK::SetTest(long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}

CString CWiRobotSDK::GetTestStr()
{
	CString result;
	GetProperty(0x4, VT_BSTR, (void*)&result);
	return result;
}

void CWiRobotSDK::SetTestStr(LPCTSTR propVal)
{
	SetProperty(0x4, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CWiRobotSDK operations

short CWiRobotSDK::GetSensorSonar1(double x, double y, double t)
{
	short result;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetSensorSonar2(double x, double y, double t)
{
	short result;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetSensorSonar3(double x, double y, double t)
{
	short result;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetSensorSonar4()
{
	short result;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetSensorSonar5()
{
	short result;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetSensorSonar6()
{
	short result;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetSensorHumanMotion1()
{
	short result;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetSensorHumanAlarm2()
{
	short result;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetSensorHumanMotion2()
{
	short result;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetSensorTiltingX()
{
	short result;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetSensorTiltingY()
{
	short result;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetSensorOverheatAD1()
{
	short result;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetSensorOverheatAD2()
{
	short result;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetSensorTemperature()
{
	short result;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetSensorIRRange(double x, double y, double t)
{
	short result;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	result = ConvertIRToCM( result );
	return result;
}



short CWiRobotSDK::GetSensorBatteryAD1()
{
	short result;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetSensorBatteryAD2()
{
	short result;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetSensorRefVoltage()
{
	short result;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

void CWiRobotSDK::EnableDcMotor(short channel)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 channel);
}

void CWiRobotSDK::DisableDcMotor(short channel)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 channel);
}

void CWiRobotSDK::EnableServo(short channel)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 channel);
}

void CWiRobotSDK::DisableServo(short channel)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 channel);
}

void CWiRobotSDK::SetDcMotorTrajectoryPlan(short channel, short tranPlanMethod)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 channel, tranPlanMethod);
}

void CWiRobotSDK::SetDcMotorSensorFilter(short channel, short filterMethod)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x1c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 channel, filterMethod);
}

void CWiRobotSDK::SetDcMotorSensorUsage(short channel, short sensorType)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x1d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 channel, sensorType);
}

void CWiRobotSDK::SetDcMotorControlMode(short channel, short controlMode)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x1e, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 channel, controlMode);
}

void CWiRobotSDK::DcMotorPositionTimeCtr(short channel, short cmdValue, short timePeriod)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x1f, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 channel, cmdValue, timePeriod);
}

void CWiRobotSDK::DcMotorPositionNonTimeCtr(short channel, short cmdValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x20, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 channel, cmdValue);
}

void CWiRobotSDK::DcMotorPwmTimeCtr(short channel, short cmdValue, short timePeriod)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x21, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 channel, cmdValue, timePeriod);
}

void CWiRobotSDK::DcMotorPwmNonTimeCtr(short channel, short cmdValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x22, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 channel, cmdValue);
}

void CWiRobotSDK::ServoTimeCtr(short channel, short cmdValue, short timePeriods)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x23, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 channel, cmdValue, timePeriods);
}

void CWiRobotSDK::servoNonTimeCtr(short channel, short cmdValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 channel, cmdValue);
}

short CWiRobotSDK::GetSensorPot(short channel)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x25, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		channel);
	return result;
}

void CWiRobotSDK::PlayAudioFile(LPCTSTR fileName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x26, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 fileName);
}

void CWiRobotSDK::TakePhoto()
{
	InvokeHelper(0x27, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWiRobotSDK::Refresh()
{
	InvokeHelper(DISPID_REFRESH, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

BOOL CWiRobotSDK::SavePhotoAsBMP(LPCTSTR fileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x28, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		fileName);
	return result;
}

void CWiRobotSDK::ServoTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6, short timePeriods)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x29, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 cmd1, cmd2, cmd3, cmd4, cmd5, cmd6, timePeriods);
}

short CWiRobotSDK::GetSensorHumanAlarm1()
{
	short result;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetSensorIRCode1()
{
	short result;
	InvokeHelper(0x2b, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetSensorIRCode2()
{
	short result;
	InvokeHelper(0x2c, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetSensorIRCode3()
{
	short result;
	InvokeHelper(0x2d, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetSensorIRCode4()
{
	short result;
	InvokeHelper(0x2e, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

void CWiRobotSDK::DcMotorPositionNonTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x2f, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 cmd1, cmd2, cmd3, cmd4, cmd5, cmd6);
}

void CWiRobotSDK::DcMotorPositionTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6, short timePeriods)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x30, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 cmd1, cmd2, cmd3, cmd4, cmd5, cmd6, timePeriods);
}

void CWiRobotSDK::SetDcMotorPositionControlPID(short channel, short Kp, short Kd, short Ki)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x31, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 channel, Kp, Kd, Ki);
}

void CWiRobotSDK::StartRecord(short voiceSegment)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x32, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 voiceSegment);
}

void CWiRobotSDK::StopRecord()
{
	InvokeHelper(0x33, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CWiRobotSDK::GetVoiceSegment()
{
	long result;
	InvokeHelper(0x34, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CWiRobotSDK::ServoNoTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x35, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 cmd1, cmd2, cmd3, cmd4, cmd5, cmd6);
}

void CWiRobotSDK::DcMotorPwmNonTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x36, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 cmd1, cmd2, cmd3, cmd4, cmd5, cmd6);
}

void CWiRobotSDK::DcMotorPwmTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6, short timePeriods)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x37, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 cmd1, cmd2, cmd3, cmd4, cmd5, cmd6, timePeriods);
}

void CWiRobotSDK::DcMotorVelocityNonTimeCtr(short channel, short cmdValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x38, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 channel, cmdValue);
}

void CWiRobotSDK::DcMotorVelocityNonTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x39, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 cmd1, cmd2, cmd3, cmd4, cmd5, cmd6);
}

void CWiRobotSDK::DcMotorVelocityTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6, short timePeriods)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x3a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 cmd1, cmd2, cmd3, cmd4, cmd5, cmd6, timePeriods);
}

void CWiRobotSDK::DcMotorVelocityTimeCtr(short channel, short cmdValue, short timePeriods)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x3b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 channel, cmdValue, timePeriods);
}

void CWiRobotSDK::SetDcMotorVelocityControlPID(short channel, short Kp, short Kd, short Ki)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x3c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 channel, Kp, Kd, Ki);
}

long CWiRobotSDK::GetImageAddress()
{
	long result;
	InvokeHelper(0x3d, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CWiRobotSDK::StopAudioPlay()
{
	InvokeHelper(0x3e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CWiRobotSDK::GetImageYDataAddress()
{
	long result;
	InvokeHelper(0x3f, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CWiRobotSDK::LcdDisplayPMS(LPCTSTR bmpFileName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x40, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bmpFileName);
}

short CWiRobotSDK::GetSensorPotVoltage()
{
	short result;
	InvokeHelper(0x41, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetSensorBatteryAD3()
{
	short result;
	InvokeHelper(0x42, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetSensorPot1()
{
	short result;
	InvokeHelper(0x43, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetSensorPot2()
{
	short result;
	InvokeHelper(0x44, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetSensorPot3()
{
	short result;
	InvokeHelper(0x45, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetSensorPot4()
{
	short result;
	InvokeHelper(0x46, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetSensorPot5()
{
	short result;
	InvokeHelper(0x47, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetSensorPot6()
{
	short result;
	InvokeHelper(0x48, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

void CWiRobotSDK::SetServoTrajectoryPlan(short channel, short tranPlanMethod)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x49, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 channel, tranPlanMethod);
}

void CWiRobotSDK::SetCustomDOUT(short dout)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x4a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 dout);
}

short CWiRobotSDK::GetCustomDIN()
{
	short result;
	InvokeHelper(0x4b, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetCustomAD1(double x, double y, double t)
{
	short result;
	InvokeHelper(0x4c, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetCustomAD2(double x, double y, double t)
{
	short result;
	InvokeHelper(0x4d, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetCustomAD3(double x, double y, double t)
{
	short result;
	InvokeHelper(0x4e, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	result = ConvertIRToCM( result );
	return result;
}

short CWiRobotSDK::GetCustomAD4(double x, double y, double t)
{
	short result;
	InvokeHelper(0x4f, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	result = ConvertIRToCM( result );
	return result;
}

short CWiRobotSDK::GetCustomAD5(double x, double y, double t)
{
	short result;
	InvokeHelper(0x50, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	result = ConvertIRToCM( result );
	return result;
}

short CWiRobotSDK::GetCustomAD6(double x, double y, double t)
{
	short result;
	InvokeHelper(0x51, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	result = ConvertIRToCM( result );
	return result;
}

short CWiRobotSDK::GetCustomAD7(double x, double y, double t)
{
	short result;
	InvokeHelper(0x52, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	result = ConvertIRToCM( result );
	return result;
}

short CWiRobotSDK::GetCustomAD8(double x, double y, double t)
{
	short result;
	InvokeHelper(0x53, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	result = ConvertIRToCM( result );
	return result;
}

void CWiRobotSDK::SystemMotorSensorRequest(short Packets)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x54, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Packets);
}

void CWiRobotSDK::SystemStandardSensorRequest(short Packets)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x55, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Packets);
}

void CWiRobotSDK::SystemCustomSensorRequest(short Packets)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x56, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Packets);
}

void CWiRobotSDK::SetSysMotorSensorPeriod(short PeriodTime)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x57, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 PeriodTime);
}

void CWiRobotSDK::SetSysStandardSensorPeriod(short PeriodTime)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x58, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 PeriodTime);
}

void CWiRobotSDK::SetSysCustomSensorPeriod(short PeriodTime)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x59, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 PeriodTime);
}

void CWiRobotSDK::EnableMotorSensorSending()
{
	InvokeHelper(0x5a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWiRobotSDK::EnableStandardSensorSending()
{
	InvokeHelper(0x5b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWiRobotSDK::EnableCustomSensorSending()
{
	InvokeHelper(0x5c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWiRobotSDK::DisableMotorSensorSending()
{
	InvokeHelper(0x5d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWiRobotSDK::DisableStandardSensorSending()
{
	InvokeHelper(0x5e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWiRobotSDK::DisableCustomSensorSending()
{
	InvokeHelper(0x5f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWiRobotSDK::SetSysAllSensorPeriod(short PeriodTime)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x60, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 PeriodTime);
}

void CWiRobotSDK::SystemAllSensorRequest(short Packets)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x61, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Packets);
}

void CWiRobotSDK::EnableAllSensorSending()
{
	InvokeHelper(0x62, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWiRobotSDK::DisableAllSensorSending()
{
	InvokeHelper(0x63, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CWiRobotSDK::GetVoiceSegLength()
{
	long result;
	InvokeHelper(0x64, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CWiRobotSDK::SetInfraredControlOutput(short low, short high)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x65, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 low, high);
}

short CWiRobotSDK::GetMotorCurrent1()
{
	short result;
	InvokeHelper(0x66, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetMotorCurrent2()
{
	short result;
	InvokeHelper(0x67, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetMotorCurrent3()
{
	short result;
	InvokeHelper(0x68, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetMotorCurrent4()
{
	short result;
	InvokeHelper(0x69, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetMotorCurrent5()
{
	short result;
	InvokeHelper(0x6a, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetMotorCurrent6()
{
	short result;
	InvokeHelper(0x6b, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetEncoderPulse1()
{
	short result;
	InvokeHelper(0x6c, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetEncoderSpeed1()
{
	short result;
	InvokeHelper(0x6d, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetEncoderPulse2()
{
	short result;
	InvokeHelper(0x6e, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetEncoderSpeed2()
{
	short result;
	InvokeHelper(0x6f, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetEncoderDir1()
{
	short result;
	InvokeHelper(0x70, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetEncoderDir2()
{
	short result;
	InvokeHelper(0x71, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetSensorSonar(short channel)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x72, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		channel);
	return result;
}

short CWiRobotSDK::GetMotorCurrent(short channel)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x73, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		channel);
	return result;
}

short CWiRobotSDK::GetCustomAD(short channel)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x74, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		channel);
	return result;
}

void CWiRobotSDK::SetMotorPolarity1(short Polarity)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x75, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Polarity);
}

void CWiRobotSDK::SetMotorPolarity2(short Polarity)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x76, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Polarity);
}

void CWiRobotSDK::SetMotorPolarity3(short Polarity)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x77, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Polarity);
}

void CWiRobotSDK::SetMotorPolarity4(short Polarity)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x78, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Polarity);
}

void CWiRobotSDK::SetMotorPolarity5(short Polarity)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x79, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Polarity);
}

void CWiRobotSDK::SetMotorPolarity6(short Polarity)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x7a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Polarity);
}

void CWiRobotSDK::SetMotorPolarity(short channel, short Polarity)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x7b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 channel, Polarity);
}

void CWiRobotSDK::EnableBumperProtection()
{
	InvokeHelper(0x7c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWiRobotSDK::DisableBumperProtection()
{
	InvokeHelper(0x7d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CWiRobotSDK::LcdDisplayPMB(LPCTSTR bmpFileName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x7e, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bmpFileName);
}

void CWiRobotSDK::SuspendDcMotor(short channel)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x7f, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 channel);
}

void CWiRobotSDK::ResumeDcMotor(short channel)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x80, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 channel);
}

void CWiRobotSDK::connectRobot(LPCTSTR robotName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x81, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 robotName);
}

long CWiRobotSDK::GetVoiceData(long VoicePtr)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x82, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		VoicePtr);
	return result;
}

short CWiRobotSDK::getSenID1()
{
	short result;
	InvokeHelper(0x83, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::getSenID2()
{
	short result;
	InvokeHelper(0x84, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::getSenID3()
{
	short result;
	InvokeHelper(0x85, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::getSenID4()
{
	short result;
	InvokeHelper(0x86, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetGPS01()
{
	short result;
	InvokeHelper(0x87, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetGPS02()
{
	short result;
	InvokeHelper(0x88, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetGPS03()
{
	short result;
	InvokeHelper(0x89, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetGPS04()
{
	short result;
	InvokeHelper(0x8a, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetGPS05()
{
	short result;
	InvokeHelper(0x8b, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetGPS06()
{
	short result;
	InvokeHelper(0x8c, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetGPS07()
{
	short result;
	InvokeHelper(0x8d, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CWiRobotSDK::GetGPS08()
{
	short result;
	InvokeHelper(0x8e, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

void CWiRobotSDK::SetGPSID(short ID1, short ID2, short ID3, short ID4)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x8f, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 ID1, ID2, ID3, ID4);
}




/// Simulator***********

//IMPLEMENT_DYNCREATE(CWiRobotSDK_Simulator, CWnd)

CWiRobotSDK_Simulator::CWiRobotSDK_Simulator(){
	encoderPulse1 = 0;
	encoderPulse2 = 0;
	encoderSpeed1 = 0;
	encoderSpeed2 = 0;
	lastEncoderPulse1Time.LowPart = 0;
	lastEncoderPulse1Time.HighPart = 0;
	lastEncoderPulse2Time.LowPart = 0;
	lastEncoderPulse2Time.HighPart = 0;
}



void CWiRobotSDK_Simulator::DcMotorVelocityNonTimeCtrAll(short cmd1, short cmd2, short cmd3, short cmd4, short cmd5, short cmd6)
{
	encoderSpeed1 = (double) +cmd1;
	encoderSpeed2 = (double) +cmd2;
}


short CWiRobotSDK_Simulator::GetEncoderPulse1()
{
	LARGE_INTEGER deltaTime;
	GetSystemTime(&st);
	SystemTimeToFileTime(&st,&ft);
	
	// Calculate time difference
	encoderPulse1Time.LowPart = ft.dwLowDateTime;
	encoderPulse1Time.HighPart = ft.dwHighDateTime;
	deltaTime.QuadPart = (encoderPulse1Time.QuadPart - lastEncoderPulse1Time.QuadPart);
	double dt = (double) deltaTime.LowPart/10000000;
	lastEncoderPulse1Time = encoderPulse1Time;
	
	// Increment Encoder
	encoderPulse1 += encoderSpeed1*dt;
	
	// Check for encoder rollover
	if (encoderPulse1 > encoderMax){
		encoderPulse1 -= encoderMax;
	} else if (encoderPulse1 < 0){
		encoderPulse1 += encoderMax;
	}

	return (short) encoderPulse1;
}

short CWiRobotSDK_Simulator::GetEncoderSpeed1()
{
	return (short) encoderSpeed1;
}

short CWiRobotSDK_Simulator::GetEncoderPulse2()
{
	LARGE_INTEGER deltaTime;
	GetSystemTime(&st);
	SystemTimeToFileTime(&st,&ft);
	
	// Calculate time difference
	encoderPulse2Time.LowPart = ft.dwLowDateTime;
	encoderPulse2Time.HighPart = ft.dwHighDateTime;
	deltaTime.QuadPart = (encoderPulse2Time.QuadPart - lastEncoderPulse2Time.QuadPart);
	double dt = (double) deltaTime.LowPart/10000000;
	lastEncoderPulse2Time = encoderPulse2Time;
	
	// Increment Encoder
	encoderPulse2 += encoderSpeed2*dt;
	
	// Check for encoder rollover
	if (encoderPulse2 > encoderMax){
		encoderPulse2 -= encoderMax;
	} else if (encoderPulse2 < 0){
		encoderPulse2 += encoderMax;
	}

	return (short) encoderPulse2;
}

short CWiRobotSDK_Simulator::GetEncoderSpeed2()
{
	return (short) encoderSpeed2;
}

short CWiRobotSDK_Simulator::GetSensorSonar1(double x, double y, double t)
{
	double range = 100.0 * (-sonarRadius + wirobotsdkMap.GetClosestWallDistance(x, y, t+SonarAngleFrontLeft));
	return short (max(min(range, sonarMaxRange),sonarMinRange));
}

short CWiRobotSDK_Simulator::GetSensorSonar2(double x, double y, double t)
{
	double range = 100.0 * (-sonarRadius + wirobotsdkMap.GetClosestWallDistance(x, y, t+SonarAngleFrontCenter));
	return short (max(min(range, sonarMaxRange),sonarMinRange));
}

short CWiRobotSDK_Simulator::GetSensorSonar3(double x, double y, double t)
{
	double range = 100.0 * (-sonarRadius + wirobotsdkMap.GetClosestWallDistance(x, y, t+SonarAngleFrontRight));
	return short (max(min(range, sonarMaxRange),sonarMinRange));
}




short CWiRobotSDK_Simulator::GetSensorIRRange(double x, double y, double t)
{
	double range = 100.0 * (-sonarRadius + wirobotsdkMap.GetClosestWallDistance(x, y, t+IRRangeAngleFrontMidLeft));
	return short (max(min(range, IRMaxRange),IRMinRange));
}

short CWiRobotSDK_Simulator::GetCustomAD1(double x, double y, double t)
{
	return short (100.0);
}

short CWiRobotSDK_Simulator::GetCustomAD2(double x, double y, double t)
{
	return short (100.0);
}

short CWiRobotSDK_Simulator::GetCustomAD3(double x, double y, double t)
{
	double range = 100.0 * (-sonarRadius + wirobotsdkMap.GetClosestWallDistance(x, y, t+IRRangeAngleFrontJustLeft));
	return short (max(min(range, IRMaxRange),IRMinRange));
}

short CWiRobotSDK_Simulator::GetCustomAD4(double x, double y, double t)
{
	double range = 100.0 * (-sonarRadius + wirobotsdkMap.GetClosestWallDistance(x, y, t+IRRangeAngleFrontJustRight));
	return short (max(min(range, IRMaxRange),IRMinRange));
}

short CWiRobotSDK_Simulator::GetCustomAD5(double x, double y, double t)
{
	double range = 100.0 * (-sonarRadius + wirobotsdkMap.GetClosestWallDistance(x, y, t+IRRangeAngleFrontMidRight));
	return short (max(min(range, IRMaxRange),IRMinRange));
}

short CWiRobotSDK_Simulator::GetCustomAD6(double x, double y, double t)
{
	double range = 100.0 * (-IRRadius  + wirobotsdkMap.GetClosestWallDistance(x, y, t+IRRangeAngleFrontFarRight));
	return short (max(min(range, IRMaxRange),IRMinRange));
}

short CWiRobotSDK_Simulator::GetCustomAD7(double x, double y, double t)
{
	double range = 100.0 * (-sonarRadius +wirobotsdkMap.GetClosestWallDistance(x, y, t+IRRangeAngleBack));
	return short (max(min(range, IRMaxRange),IRMinRange));
}

short CWiRobotSDK_Simulator::GetCustomAD8(double x, double y, double t)
{
	double range = 100.0 * ( -IRRadius + wirobotsdkMap.GetClosestWallDistance(x, y, t+IRRangeAngleFrontFarLeft));
	return short (max(min(range, IRMaxRange),IRMinRange));
}


short CWiRobotSDK::ConvertIRToCM(short result)
{
	double res = (double) result;
	double resultInCM = (short) (pow(res,4)*IR4Coeff4 + pow(res,3)*IR4Coeff3 + pow(res,2)*IR4Coeff2 + result*IR4Coeff1 + IR4Coeff0); 
	return (short) max(min(IRMaxRange,resultInCM),IRMinRange);
}

